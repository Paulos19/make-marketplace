// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Ou "mysql", "sqlite", etc.
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  SELLER
  ADMIN
}

// Modelo User agora contém todos os campos e a role para diferenciar
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  role          UserRole  @default(USER)

  // Campos de Vendedor (opcionais, preenchidos apenas se role for SELLER)
  storeName            String?
  whatsappLink         String?
  profileDescription   String?
  sellerBannerImageUrl String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relações
  accounts     Account[]
  sessions     Session[]
  products     Product[] // Um usuário (vendedor) pode ter muitos produtos
  reservations Reservation[] // Um usuário (comprador) pode ter muitas reservas
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Produto agora se relaciona diretamente com User
model Product {
  id            String   @id @default(cuid())
  name          String
  description   String?
  price         Float
  originalPrice Float?
  onPromotion   Boolean  @default(false)
  quantity      Int      @default(1)
  imageUrls     String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // << RELAÇÃO CORRIGIDA >>
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  categories   Category[]
  reservations Reservation[]
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model Reservation {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ThemeSettings {
  id      String @id @default(cuid()) // Apenas um registro existirá nesta tabela
  
  // Exemplo de cores da marca que serão customizáveis
  // Armazenaremos como string no formato HSL: "262 64% 49%"
  zaca_roxo  String?
  zaca_azul  String?
  zaca_magenta String?
  zaca_vermelho String?
  
  // Exemplo de fontes que serão customizáveis
  // Armazenaremos o nome da fonte, ex: 'Roboto', 'Montserrat'
  font_sans    String?
  font_display String?

  updatedAt DateTime @updatedAt
}
