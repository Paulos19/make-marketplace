generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS EXISTENTES (sem alterações)
enum UserRole {
  USER
  SELLER
  ADMIN
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  SOLD
  CANCELED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAST_DUE
  TRIALING
  UNPAID
}

enum PurchaseType {
  ACHADINHO_TURBO
  CARROSSEL_PRACA
}

enum ProductCondition {
  NEW
  GOOD_CONDITION
  USED
  REFURBISHED
  OTHER
}

// --- NOVOS ENUMS PARA O PIX ---

// Novo Enum para o status do pagamento PIX
enum PixPaymentStatus {
  PENDING
  CONFIRMED
}

// Novo Enum para diferenciar o método de pagamento na tabela Purchase
enum PaymentMethod {
  STRIPE
  PIX
}

// --- MODELOS ---

model User {
  id                       String               @id @default(cuid())
  name                     String?
  email                    String?              @unique
  emailVerified            DateTime?
  image                    String?
  passwordHash             String?
  role                     UserRole             @default(USER)
  storeName                String?
  whatsappLink             String?
  customRedirectUrl        String?
  profileDescription       String?
  sellerBannerImageUrl     String?
  showInSellersPage        Boolean              @default(false)
  createdAt                DateTime             @default(now())
  updatedAt                DateTime             @updatedAt
  stripeCustomerId         String?              @unique @map("stripe_customer_id")
  stripeSubscriptionId     String?              @unique @map("stripe_subscription_id")
  stripeSubscriptionStatus SubscriptionStatus?  @map("stripe_subscription_status")
  stripePriceId            String?              @map("stripe_price_id")
  stripeCurrentPeriodEnd   DateTime?            @map("stripe_current_period_end")
  accounts                 Account[]
  sessions                 Session[]
  products                 Product[]
  reservations             Reservation[]
  reviewsMade              Review[]             @relation("BuyerReviews")
  reviewsReceived          Review[]             @relation("SellerReviews")
  shortLinks               ShortLink[]
  adminNotifications       AdminNotification[]
  purchases                Purchase[]
  favorite                 Favorite[]
  // Adiciona a relação com os pagamentos PIX iniciados pelo usuário
  pixPayments              PixPayment[]

  @@map("User")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("VerificationToken")
}

model Product {
  id            String   @id @default(cuid())
  name          String
  description   String
  price         Float?
  priceType     String   @default("FIXED")
  originalPrice Float?
  images        String[]
  productUrl    String?
  isFeatured    Boolean  @default(false)
  isReserved    Boolean  @default(false)
  isSold        Boolean  @default(false)
  isService     Boolean  @default(false)
  quantity      Int      @default(1)
  onPromotion   Boolean  @default(false)
  condition     ProductCondition @default(NEW)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  boostedUntil  DateTime? @map("boosted_until")
  // Novo campo para controlar a visibilidade no "Carrossel na Praça"
  carouselUntil DateTime? @map("carousel_until")
  categoryId    String
  category      Category @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations  Reservation[]
  purchases     Purchase[]
  shortLinks    ShortLink[]
  favorite      Favorite[]

  @@map("Product")
}

model Purchase {
  id                      String       @id @default(cuid())
  type                    PurchaseType
  status                  String       @default("PAID")
  submissionStatus        String       @default("AVAILABLE")
  createdAt               DateTime     @default(now())
  // Novo campo para identificar o método de pagamento
  paymentMethod           PaymentMethod @default(STRIPE)
  // O ID do Stripe agora é opcional, pois o pagamento pode ser via PIX
  stripePaymentIntentId   String?      @unique
  userId                  String
  user                    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId               String?
  product                 Product?     @relation(fields: [productId], references: [id], onDelete: SetNull)
  // Adiciona a relação com o pagamento PIX
  pixPayment              PixPayment?

  @@index([userId])
  @@index([productId])
  @@map("Purchase")
}

// --- NOVOS MODELOS PARA O PIX ---

// Modelo para armazenar a cobrança PIX gerada e seu status
// Esta tabela será usada pelo sistema de polling para verificar o pagamento.
model PixPayment {
  id        String           @id @default(cuid())
  txid      String           @unique // ID da transação da Efí, usado para o polling
  status    PixPaymentStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Relação 1-para-1 com a compra
  purchaseId String          @unique
  purchase   Purchase        @relation(fields: [purchaseId], references: [id], onDelete: Cascade)

  @@map("PixPayment")
}

// Modelo para armazenar os dados brutos recebidos pelo webhook da Efí
// Essencial para auditoria e depuração.
model PixWebhook {
  id          String   @id @default(cuid())
  txid        String   @unique
  endToEndId  String
  valor       String
  horario     DateTime
  pix         Json // Armazena o payload completo do webhook
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("PixWebhook")
}

// --- MODELOS EXISTENTES (sem alterações a partir daqui) ---

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]

  @@map("Category")
}

model Reservation {
  id                  String            @id @default(cuid())
  userId              String
  productId           String
  status              ReservationStatus @default(PENDING)
  quantity            Int
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  reviewToken         String?           @unique
  isArchived          Boolean           @default(false)
  readByAdmin         Boolean           @default(false)
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  product             Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  review              Review?
  adminNotification   AdminNotification?

  @@map("Reservation")
}

model Review {
  id            String      @id @default(cuid())
  rating        Int
  comment       String?
  createdAt     DateTime    @default(now())
  reservationId String      @unique
  sellerId      String
  buyerId       String
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  seller        User        @relation("SellerReviews", fields: [sellerId], references: [id], onDelete: Cascade)
  buyer         User        @relation("BuyerReviews", fields: [buyerId], references: [id], onDelete: Cascade)

  @@index([sellerId])
  @@map("Review")
}

model ThemeSettings {
  id            String   @id @default(cuid())
  zaca_roxo     String?
  zaca_azul     String?
  zaca_magenta  String?
  zaca_vermelho String?
  font_sans     String?
  font_display  String?
  updatedAt     DateTime @updatedAt

  @@map("ThemeSettings")
}

model NewsletterSubscription {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())

  @@map("NewsletterSubscription")
}

model HomePageBanner {
  id        String   @id @default(cuid())
  title     String
  imageUrl  String
  linkUrl   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("HomePageBanner")
}

model HomepageSection {
  id              String   @id @default(cuid())
  title           String
  bannerImageUrl  String
  bannerFontColor String   @default("#FFFFFF")
  productIds      String[]
  order           Int      @default(0)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("HomepageSection")
}

model MarketingCampaign {
  id                 String    @id @default(cuid())
  status             String    @default("DRAFT")
  subject            String
  headline           String
  body               String
  ctaText            String
  ctaLink            String
  imageUrl           String
  targetAudienceJson String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  sentAt             DateTime?

  @@map("MarketingCampaign")
}

model ShortLink {
  id          String   @id @default(cuid())
  shortCode   String   @unique
  originalUrl String
  createdAt   DateTime @default(now())
  clicks      Int      @default(0)
  description String?
  imageUrl    String?
  title       String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId   String?
  product     Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("ShortLink")
}

model AdminNotification {
  id                   String       @id @default(cuid())
  message              String
  isRead               Boolean      @default(false)
  createdAt            DateTime     @default(now())
  type                 String       @default("RESERVATION")
  metadata             Json?
  reservationId        String?      @unique
  sellerId             String?
  sellerWhatsappLink   String?
  reservation          Reservation? @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  seller               User?        @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@map("AdminNotification")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}