generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelos de Usuário e Autenticação
model User {
  id                     String              @id @default(cuid())
  name                   String?
  email                  String?             @unique
  emailVerified          DateTime?
  image                  String?
  passwordHash           String?
  role                   UserRole            @default(USER)
  storeName              String?
  whatsappLink           String?
  profileDescription     String?
  sellerBannerImageUrl   String?
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  showInSellersPage      Boolean             @default(false)
  
  accounts               Account[]
  adminNotifications     AdminNotification[] @relation("SellerNotifications")
  products               Product[]
  reservations           Reservation[]
  sessions               Session[]
  ShortLink              ShortLink[]
  
  reviewsGiven           Review[]            @relation("reviewsGiven")
  reviewsReceived        Review[]            @relation("reviewsReceived")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Modelos do Marketplace
model Product {
  id              String        @id @default(uuid())
  name            String
  description     String
  price           Float
  originalPrice   Float?
  images          String[]
  categoryId      String
  userId          String
  isFeatured      Boolean       @default(false)
  isReserved      Boolean       @default(false)
  isSold          Boolean       @default(false) // <-- CAMPO ADICIONADO AQUI
  quantity        Int           @default(1)
  onPromotion     Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  category        Category      @relation(fields: [categoryId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
  reservations    Reservation[]
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model Reservation {
  id                  String             @id @default(uuid())
  userId              String
  productId           String
  status              ReservationStatus  @default(PENDING)
  quantity            Int
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  
  adminNotification   AdminNotification?
  product             Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  review              Review?
  reviewToken         String?            @unique
}

model Review {
  id            String      @id @default(cuid())
  rating        Int
  comment       String?     @db.Text
  createdAt     DateTime    @default(now())

  reservationId String      @unique
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  sellerId      String
  seller        User        @relation("reviewsReceived", fields: [sellerId], references: [id], onDelete: Cascade)

  buyerId       String
  buyer         User        @relation("reviewsGiven", fields: [buyerId], references: [id], onDelete: Cascade)

  @@index([sellerId])
}


// Modelos do Painel Admin
model ThemeSettings {
  id            String   @id @default(cuid())
  zaca_roxo     String?
  zaca_azul     String?
  zaca_magenta  String?
  zaca_vermelho String?
  font_sans     String?
  font_display  String?
  updatedAt     DateTime @updatedAt
}

model NewsletterSubscription {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model HomePageBanner {
  id        String   @id @default(uuid())
  title     String
  imageUrl  String
  linkUrl   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HomepageSection {
  id              String   @id @default(cuid())
  title           String
  bannerImageUrl  String
  bannerFontColor String   @default("#FFFFFF")
  productIds      String[]
  order           Int      @default(0)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model MarketingCampaign {
  id                   String    @id @default(cuid())
  status               String    @default("DRAFT")
  subject              String
  headline             String
  body                 String
  ctaText              String
  ctaLink              String
  imageUrl             String
  targetAudienceJson   String
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  sentAt               DateTime?
}

model ShortLink {
  id          String   @id @default(cuid())
  shortCode   String   @unique
  originalUrl String
  createdAt   DateTime @default(now())
  userId      String
  clicks      Int      @default(0)
  description String?
  imageUrl    String?
  title       String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AdminNotification {
  id                 String      @id @default(cuid())
  message            String
  isRead             Boolean     @default(false)
  reservationId      String      @unique
  sellerId           String
  sellerWhatsappLink String?
  createdAt          DateTime    @default(now())
  reservation        Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  seller             User        @relation("SellerNotifications", fields: [sellerId], references: [id], onDelete: Cascade)
}

// ENUMs
enum UserRole {
  USER
  SELLER
  ADMIN
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  SOLD
  CANCELED
}
