generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Product {
  id            String        @id @default(cuid())
  name          String
  description   String?
  price         Float // This will be the promotional price if onPromotion is true, otherwise the regular price
  originalPrice Float? // The price before promotion, only relevant if onPromotion is true
  onPromotion   Boolean       @default(false) // Flag to indicate if the product is on promotion
  imageUrls     String[]
  quantity      Int           @default(0) // Novo campo para quantidade do produto
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  userId        String
  usado         Boolean       @default(false)
  user          User          @relation(fields: [userId], references: [id])
  categories    Category[]    @relation("ProductCategories")
  reservations  Reservation[] // Relation to reservations

  @@index([userId])
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  products  Product[] @relation("ProductCategories")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// New Reservation Model
enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED // Optional: if you want to mark reservations as fulfilled
}

model Reservation {
  id        String            @id @default(cuid())
  quantity  Int
  status    ReservationStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  productId String
  product   Product @relation(fields: [productId], references: [id])

  userId String // User who made the reservation
  user   User   @relation(fields: [userId], references: [id])

  // Optional: Add a field for sellerId if you want to directly link the seller
  // who owns the product, though it can be inferred via product.userId
  // sellerId    String
  // seller      User              @relation(name: "SellerReservations", fields: [sellerId], references: [id])
  // @@index([sellerId]) // if sellerId is added

  @@index([productId])
  @@index([userId])
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                   String        @id @default(cuid())
  name                 String?
  email                String?       @unique
  passwordHash         String?
  emailVerified        DateTime?
  storeName            String?
  image                String?
  accounts             Account[]
  sessions             Session[]
  products             Product[]
  sellerBannerImageUrl String?
  reservations         Reservation[] // Reservas feitas pelo usuário ou em seus produtos
  whatsappLink         String? // Link do WhatsApp do usuário
  profileDescription   String? // Descrição do perfil do vendedor
  role                 UserRole      @default(USER) // Novo campo de papel
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  @@map("users")
}
