// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // Certifique-se que o provider está correto para o seu banco (ex: postgresql, mysql, sqlite)
  provider = "postgresql" 
  url      = env("DATABASE_URL")
}

// Enum para Papéis de Usuário, agora com a role SELLER
enum UserRole {
  USER
  SELLER
  ADMIN
}

// --- MODELOS PRINCIPAIS DA APLICAÇÃO ---

model User {
  id                   String    @id @default(cuid())
  name                 String?
  email                String?   @unique
  emailVerified        DateTime?
  image                String?   // Avatar do usuário
  passwordHash         String?   // Para login com credenciais
  role                 UserRole  @default(USER) // Padrão é USER (comprador)
  
  // Campos do Vendedor (Zacaplace)
  whatsappLink         String?
  storeName            String?               // Nome da Loja
  profileDescription   String?   @db.Text      // Descrição do perfil/loja
  sellerBannerImageUrl String?               // URL da imagem de banner da página do vendedor

  // Relações
  accounts     Account[]
  sessions     Session[]
  products     Product[]     @relation("UserProducts")
  reservations Reservation[] @relation("UserReservations")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id   String @id @default(cuid())
  name String @unique

  products Product[] @relation("CategoryToProduct")
}

model Product {
  id            String    @id @default(cuid())
  name          String
  description   String?   @db.Text
  price         Float
  originalPrice Float?    // Preço original se estiver em promoção
  onPromotion   Boolean?  @default(false)
  imageUrls     String[]
  quantity      Int       @default(0) // Quantidade em estoque

  // Relação com o Vendedor (User)
  userId String
  user   User   @relation("UserProducts", fields: [userId], references: [id], onDelete: Cascade)

  // Relação com Categorias
  categories Category[] @relation("CategoryToProduct")

  // Relação com Reservas
  reservations Reservation[] @relation("ProductReservations")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reservation {
  id        String   @id @default(cuid())
  quantity  Int
  status    String   // Ex: PENDING, CONFIRMED, CANCELLED, COMPLETED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relação com o Comprador (User)
  userId String
  user   User   @relation("UserReservations", fields: [userId], references: [id], onDelete: Cascade)

  // Relação com o Produto
  productId String
  product   Product @relation("ProductReservations", fields: [productId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
}


// --- MODELOS PADRÃO DO NEXTAUTH.JS ---

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}