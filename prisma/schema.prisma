// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMs para papéis de usuário, status de reserva, e os novos status de assinatura/compra
enum UserRole {
  USER
  SELLER
  ADMIN
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  SOLD
  CANCELED
}

// NOVO: Enum para o status da assinatura do Stripe
enum SubscriptionStatus {
  ACTIVE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAST_DUE
  TRIALING
  UNPAID
}

// NOVO: Enum para os tipos de compras avulsas
enum PurchaseType {
  ACHADINHO_TURBO
  CARROSSEL_PRACA
}


// Modelo para Usuários, Vendedores e Administradores
model User {
  id                     String    @id @default(cuid())
  name                   String?
  email                  String?   @unique
  emailVerified          DateTime?
  image                  String?
  passwordHash           String?
  role                   UserRole  @default(USER)
  storeName              String?
  whatsappLink           String?
  profileDescription     String?
  sellerBannerImageUrl   String?
  showInSellersPage      Boolean   @default(false)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  // --- INÍCIO DAS NOVAS COLUNAS PARA ASSINATURAS STRIPE ---
  stripeCustomerId         String?             @unique @map("stripe_customer_id")
  stripeSubscriptionId     String?             @unique @map("stripe_subscription_id")
  stripeSubscriptionStatus SubscriptionStatus? @map("stripe_subscription_status")
  stripePriceId            String?             @map("stripe_price_id")
  stripeCurrentPeriodEnd   DateTime?           @map("stripe_current_period_end")
  // --- FIM DAS NOVAS COLUNAS ---

  accounts               Account[]
  sessions               Session[]
  products               Product[]
  reservations           Reservation[]
  reviewsMade            Review[]           @relation("BuyerReviews")
  reviewsReceived        Review[]           @relation("SellerReviews")
  shortLinks             ShortLink[]
  adminNotifications     AdminNotification[]
  purchases              Purchase[] // NOVO: Relação com compras avulsas

  @@map("User")
}

// Modelo para contas de provedores OAuth (NextAuth)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Account")
}

// Modelo para sessões de usuário (NextAuth)
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Session")
}

// Modelo para tokens de verificação (email, reset de senha)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("VerificationToken")
}

// Modelo de Produtos
model Product {
  id            String   @id @default(cuid())
  name          String
  description   String
  price         Float
  originalPrice Float?
  images        String[]
  isFeatured    Boolean  @default(false)
  isReserved    Boolean  @default(false)
  isSold        Boolean  @default(false)
  quantity      Int      @default(1)
  onPromotion   Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // --- INÍCIO DA NOVA COLUNA PARA IMPULSIONAMENTO ---
  boostedUntil DateTime? @map("boosted_until")
  // --- FIM DA NOVA COLUNA ---

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  reservations Reservation[]
  purchases    Purchase[] // NOVO: Relação com compras avulsas

  @@map("Product")
}

// NOVO: Modelo para rastrear compras de impulsionamentos avulsos
model Purchase {
  id                    String       @id @default(cuid())
  type                  PurchaseType
  status                String       @default("PAID") // Pode ser PENDING, PAID, FAILED
  stripePaymentIntentId String       @unique
  createdAt             DateTime     @default(now())
  
  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // O productId é opcional, pois um plano pode não estar ligado a um produto específico
  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([productId])
  @@map("Purchase")
}


// Modelo de Categorias de Produtos
model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]

  @@map("Category")
}

// Modelo de Reservas de Produtos
model Reservation {
  id         String   @id @default(cuid())
  userId     String
  productId  String
  status     ReservationStatus @default(PENDING)
  quantity   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  reviewToken String?  @unique

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  review    Review?
  adminNotification AdminNotification?

  @@map("Reservation")
}

// Modelo para Avaliações de Compras
model Review {
  id            String    @id @default(cuid())
  rating        Int
  comment       String?
  createdAt     DateTime  @default(now())
  
  reservationId String    @unique
  sellerId      String
  buyerId       String
  
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  seller        User        @relation("SellerReviews", fields: [sellerId], references: [id], onDelete: Cascade)
  buyer         User        @relation("BuyerReviews", fields: [buyerId], references: [id], onDelete: Cascade)
  
  @@index([sellerId])
  @@map("Review")
}

// Modelo para Configurações do Tema
model ThemeSettings {
  id              String    @id @default(cuid())
  zaca_roxo       String?
  zaca_azul       String?
  zaca_magenta    String?
  zaca_vermelho   String?
  font_sans       String?
  font_display    String?
  updatedAt       DateTime  @updatedAt

  @@map("ThemeSettings")
}

// Modelo para Inscrições na Newsletter
model NewsletterSubscription {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())

  @@map("NewsletterSubscription")
}

// Modelo para Banners da Página Inicial
model HomePageBanner {
  id         String    @id @default(cuid())
  title      String
  imageUrl   String
  linkUrl    String?
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("HomePageBanner")
}

// Modelo para Seções Customizadas da Página Inicial
model HomepageSection {
  id              String    @id @default(cuid())
  title           String
  bannerImageUrl  String
  bannerFontColor String    @default("#FFFFFF")
  productIds      String[]
  order           Int       @default(0)
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("HomepageSection")
}

// Modelo para Campanhas de Marketing
model MarketingCampaign {
  id                 String   @id @default(cuid())
  status             String   @default("DRAFT")
  subject            String
  headline           String
  body               String
  ctaText            String
  ctaLink            String
  imageUrl           String
  targetAudienceJson String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  sentAt             DateTime?

  @@map("MarketingCampaign")
}

// Modelo para Encurtador de Links
model ShortLink {
  id          String   @id @default(cuid())
  shortCode   String   @unique
  originalUrl String
  createdAt   DateTime @default(now())
  clicks      Int      @default(0)
  description String?
  imageUrl    String?
  title       String?

  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@map("ShortLink")
}

// Modelo para Notificações do Administrador
model AdminNotification {
  id                 String    @id @default(cuid())
  message            String
  isRead             Boolean   @default(false)
  
  reservationId      String    @unique
  sellerId           String
  sellerWhatsappLink String?
  createdAt          DateTime  @default(now())

  reservation Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  seller      User        @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@map("AdminNotification")
}