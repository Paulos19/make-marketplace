generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  SELLER
  ADMIN
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  SOLD
  CANCELED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAST_DUE
  TRIALING
  UNPAID
}

enum PurchaseType {
  ACHADINHO_TURBO
  CARROSSEL_PRACA
}

enum ProductCondition {
  NEW
  GOOD_CONDITION
  USED
  REFURBISHED
  OTHER
}

model User {
  id                       String              @id @default(cuid())
  name                     String?
  email                    String?             @unique
  emailVerified            DateTime?
  image                    String?
  passwordHash             String?
  role                     UserRole            @default(USER)
  storeName                String?
  whatsappLink             String?
  customRedirectUrl        String?
  profileDescription       String?
  sellerBannerImageUrl     String?
  showInSellersPage        Boolean             @default(false)
  createdAt                DateTime            @default(now())
  updatedAt                DateTime            @updatedAt
  stripeCustomerId         String?             @unique @map("stripe_customer_id")
  stripeSubscriptionId     String?             @unique @map("stripe_subscription_id")
  stripeSubscriptionStatus SubscriptionStatus? @map("stripe_subscription_status")
  stripePriceId            String?             @map("stripe_price_id")
  stripeCurrentPeriodEnd   DateTime?           @map("stripe_current_period_end")

  accounts           Account[]
  sessions           Session[]
  products           Product[]
  reservations       Reservation[]
  reviewsMade        Review[]            @relation("BuyerReviews")
  reviewsReceived    Review[]            @relation("SellerReviews")
  shortLinks         ShortLink[]
  adminNotifications AdminNotification[]
  purchases          Purchase[]

  @@map("User")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("VerificationToken")
}

model Product {
  id            String   @id @default(cuid())
  name          String
  description   String
  price         Float?
  priceType     String   @default("FIXED")
  originalPrice Float?
  images        String[]
  productUrl    String?
  isFeatured    Boolean  @default(false)
  isReserved    Boolean  @default(false)
  isSold        Boolean  @default(false)
  isService     Boolean  @default(false)
  quantity      Int      @default(1)
  onPromotion   Boolean  @default(false)

  condition ProductCondition @default(NEW)

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  boostedUntil DateTime? @map("boosted_until")

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  reservations Reservation[]
  purchases    Purchase[]
  shortLinks   ShortLink[]

  @@map("Product")
}

model Purchase {
  id                    String       @id @default(cuid())
  type                  PurchaseType
  status                String       @default("PAID")
  submissionStatus      String       @default("AVAILABLE")
  stripePaymentIntentId String       @unique
  createdAt             DateTime     @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([productId])
  @@map("Purchase")
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]

  @@map("Category")
}

model Reservation {
  id          String            @id @default(cuid())
  userId      String
  productId   String
  status      ReservationStatus @default(PENDING)
  quantity    Int
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  reviewToken String?           @unique
  isArchived  Boolean           @default(false)

  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  product           Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  review            Review?
  adminNotification AdminNotification?

  @@map("Reservation")
}

model Review {
  id            String      @id @default(cuid())
  rating        Int
  comment       String?
  createdAt     DateTime    @default(now())
  reservationId String      @unique
  sellerId      String
  buyerId       String
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  seller        User        @relation("SellerReviews", fields: [sellerId], references: [id], onDelete: Cascade)
  buyer         User        @relation("BuyerReviews", fields: [buyerId], references: [id], onDelete: Cascade)

  @@index([sellerId])
  @@map("Review")
}

model ThemeSettings {
  id            String   @id @default(cuid())
  zaca_roxo     String?
  zaca_azul     String?
  zaca_magenta  String?
  zaca_vermelho String?
  font_sans     String?
  font_display  String?
  updatedAt     DateTime @updatedAt

  @@map("ThemeSettings")
}

model NewsletterSubscription {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())

  @@map("NewsletterSubscription")
}

model HomePageBanner {
  id        String   @id @default(cuid())
  title     String
  imageUrl  String
  linkUrl   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("HomePageBanner")
}

model HomepageSection {
  id              String   @id @default(cuid())
  title           String
  bannerImageUrl  String
  bannerFontColor String   @default("#FFFFFF")
  productIds      String[]
  order           Int      @default(0)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("HomepageSection")
}

model MarketingCampaign {
  id                 String    @id @default(cuid())
  status             String    @default("DRAFT")
  subject            String
  headline           String
  body               String
  ctaText            String
  ctaLink            String
  imageUrl           String
  targetAudienceJson String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  sentAt             DateTime?

  @@map("MarketingCampaign")
}

model ShortLink {
  id          String   @id @default(cuid())
  shortCode   String   @unique
  originalUrl String
  createdAt   DateTime @default(now())
  clicks      Int      @default(0)
  description String?
  imageUrl    String?
  title       String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("ShortLink")
}

model AdminNotification {
  id        String   @id @default(cuid())
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  type      String   @default("RESERVATION")
  metadata  Json?

  reservationId      String? @unique
  sellerId           String?
  sellerWhatsappLink String?

  reservation Reservation? @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  seller      User?        @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@map("AdminNotification")
}
